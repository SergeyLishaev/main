package backend.access;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import backend.entities.Doctor;
import backend.entities.FullName;
import backend.entities.Patient;
import backend.entities.Prescription;


public class PrescriptionDAO extends AbstractDAO <Prescription>{

	private void createTable() {
		String sqlQuery = "CREATE TABLE prescriptions (id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, description VARCHAR(255) NOT NULL,"
				+ " patient BIGINT NOT NULL, doctor BIGINT NOT NULL, date_of_creation VARCHAR(10) NOT NULL,"
				+ " validity VARCHAR(13) NOT NULL, priority VARCHAR(6) NOT NULL,"
				+ " FOREIGN KEY (patient)  REFERENCES patients (id) ON UPDATE CASCADE ON DELETE RESTRICT,"
				+ " FOREIGN KEY (doctor)  REFERENCES doctors (id) ON UPDATE CASCADE ON DELETE RESTRICT)";
		doQuery(sqlQuery);
	}

	public boolean createEntity(Prescription prescription) throws SQLException {
		String sqlCheckQuary = "SELECT * FROM prescriptions WHERE description = '" + prescription.getDescription() + "' AND patient = " + prescription.getPatient().getId() + "AND doctor = " + prescription.getDoctor().getId() + " AND date_of_creation = '" + prescription.getDate() + "'";
		if(checkQuery(sqlCheckQuary)) return false;
		String sqlQuery = "INSERT INTO prescriptions (description, patient, doctor, date_of_creation, validity, priority) VALUES(" + "'" + prescription.getDescription() + "'" + ", "
				+ prescription.getPatient().getId() + ", " + prescription.getDoctor().getId() + ", " + "'" + prescription.getDate() + "'" + ", "
				+ "'" + prescription.getValidity() + "'" + ", " + "'" + prescription.getPriority() + "'" + ")";
		doQuery(sqlQuery);
		return true;
	}

	public void deleteEntity(Prescription prescription) {
		String sqlQuery = "DELETE FROM prescriptions WHERE ID = " + prescription.getId();
		doQuery(sqlQuery);

	}

	public boolean updateEntity(Prescription prescription) throws SQLException{
		String sqlCheckQuary = "SELECT * FROM prescriptions WHERE description = '" + prescription.getDescription() + "' AND patient = " + prescription.getPatient().getId() + "AND doctor = " + prescription.getDoctor().getId() + " AND date_of_creation = '" + prescription.getDate() + "'";
		if(checkQuery(sqlCheckQuary)) return false;
		String sqlQuery = "UPDATE prescriptions SET DESCRIPTION = " + "'" + prescription.getDescription() + "'" + ", PATIENT = " + prescription.getPatient().getId()
				+ ", DOCTOR = " + prescription.getDoctor().getId() + ", DATE_OF_CREATION = " + "'" + prescription.getDate() + "'" + ", VALIDITY = " + "'" + prescription.getValidity()
				+ "'" + ", PRIORITY = " + "'" + prescription.getPriority()+ "'" + " WHERE ID = " + prescription.getId();
		doQuery(sqlQuery);
		return true;
	}

	public ArrayList<Prescription> showTable() {
		String sqlQuery = "SELECT * FROM prescriptions";
		return showTable(sqlQuery);
	}
	public ArrayList<Prescription> showFilterTable(Long idPatient, String description, String priority) {
		String sqlQuery = "SELECT * FROM prescriptions WHERE description = '" + description + "' AND patient = " + idPatient + " AND priority = '" + priority + "'";
		return showTable(sqlQuery);
	}
	public String getCountPrescriptions() throws SQLException{
		String sqlQuery = "SELECT COUNT(*) FROM prescriptions";
		return String.valueOf(getNumber(sqlQuery));
	}
	@Override
	protected ArrayList<Prescription> executeResultSet(ResultSet resultSet) throws SQLException {
		ArrayList<Prescription> listOfPrescriptions = new ArrayList<Prescription>();
		DoctorDAO doctorDAO = new  DoctorDAO();
		PatientDAO patientDAO = new  PatientDAO();
		while (resultSet.next()) {
			Long id = resultSet.getLong("id");
			String description = resultSet.getString("description");
			Long patientId = resultSet.getLong("patient");
			Long doctorId = resultSet.getLong("doctor");
			String date = resultSet.getString("date_of_creation");
			String validity = resultSet.getString("validity");
			String priority = resultSet.getString("priority");
			Patient patient = patientDAO.getEntity("SELECT * FROM patients WHERE id = " + patientId);
			Doctor doctor = doctorDAO.getEntity("SELECT * FROM doctors WHERE id = " + doctorId);
			FullName patientName = new FullName(patientId, patient.getSurname(), patient.getName(), patient.getPatronymic());
			FullName doctorName = new FullName(doctorId, doctor.getSurname(), doctor.getName(), doctor.getPatronymic());
			Prescription prescription = new Prescription(id, description, patientName, doctorName, date, validity, priority);
			listOfPrescriptions.add(prescription);
		}
		resultSet.close();
		return listOfPrescriptions;
	}

	@Override
	protected Prescription returnEntity(ResultSet resultSet) throws SQLException {
		DoctorDAO doctorDAO = new  DoctorDAO();
		PatientDAO patientDAO = new  PatientDAO();
		Prescription prescription = null;
		while (resultSet.next()) {
			Long id = resultSet.getLong("id");
			String description = resultSet.getString("description");
			Long patientId = resultSet.getLong("patient");
			Long doctorId = resultSet.getLong("doctor");
			String date = resultSet.getString("date_of_creation");
			String validity = resultSet.getString("validity");
			String priority = resultSet.getString("priority");
			Patient patient = patientDAO.getEntity("SELECT * FROM patients WHERE id = " + patientId);
			Doctor doctor = doctorDAO.getEntity("SELECT * FROM doctors WHERE id = " + doctorId);
			FullName patientName = new FullName(patientId, patient.getSurname(), patient.getName(), patient.getPatronymic());
			FullName doctorName = new FullName(doctorId, doctor.getSurname(), doctor.getName(), doctor.getPatronymic());
			prescription = new Prescription(id, description, patientName, doctorName, date, validity, priority);
		}
		resultSet.close();
		return prescription;
	}
	public ArrayList<FullName> getDoctorFullName(){
		DoctorDAO doctorDAO = new  DoctorDAO();
		return doctorDAO.showDoctorName();
	}
	public ArrayList<FullName> getPatientFullName(){
		PatientDAO patientDAO = new  PatientDAO();
		return patientDAO.showPatientName();
	}

}
