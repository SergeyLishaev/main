package backend.access;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import backend.entities.Doctor;
import backend.entities.FullName;
import backend.entities.Patient;

public class DoctorDAO extends AbstractDAO<Doctor> {

	private void createTable() {
		String sqlQuery = "CREATE TABLE doctors (id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, surname VARCHAR(25) NOT NULL,"
				+ " name VARCHAR(25) NOT NULL, patronymic VARCHAR(25) NOT NULL,"
				+ " specialization VARCHAR(50) NOT NULL)";
		doQuery(sqlQuery);
	}

	public boolean createEntity(Doctor doctor) throws SQLException {
		String sqlCheckQuary = "SELECT * FROM doctors WHERE surname = '" + doctor.getSurname() + "' AND name = '" + doctor.getName() + "' AND patronymic = '" + doctor.getPatronymic() + "'";
		if(checkQuery(sqlCheckQuary)) return false;
		String sqlQuery = "INSERT INTO doctors(surname, name, patronymic, specialization) VALUES (" + "'" + doctor.getSurname() + "'" + ", "
						+ "'" + doctor.getName() + "'" + ", " + "'" + doctor.getPatronymic() + "'" + ", " + "'"
						+ doctor.getSpecialization() + "'" + ")";
		doQuery(sqlQuery);
		return true;

	}

	public void deleteEntity(Doctor doctor) {
		String sqlQuery = "DELETE FROM doctors WHERE ID = " + doctor.getId();
		doQuery(sqlQuery);

	}

	public boolean updateEntity(Doctor doctor) throws SQLException {
		String sqlCheckQuary = "SELECT * FROM doctors WHERE surname = '" + doctor.getSurname() + "' AND name = '" + doctor.getName() + "' AND patronymic = '" + doctor.getPatronymic() + "'";
		if(checkQuery(sqlCheckQuary)) return false;
		String sqlQuery = "UPDATE doctors SET SURNAME = " + "'" + doctor.getSurname() + "'" + ", NAME = " + "'" + doctor.getName()
				+ "'" + ", PATRONYMIC = " + "'" + doctor.getPatronymic() + "'" + ", SPECIALIZATION = " 
				+ "'" + doctor.getSpecialization() + "'" + " WHERE ID = " + doctor.getId();
		doQuery(sqlQuery);
		return true;
	}

	public ArrayList<Doctor> showTable() {
		String sqlQuery = "SELECT * FROM doctors";
		return showTable(sqlQuery);
	}

	@Override
	protected ArrayList<Doctor> executeResultSet(ResultSet resultSet) throws SQLException {
		ArrayList<Doctor> listOfDoctors = new ArrayList();
		while (resultSet.next()) {
			Doctor doctor = new Doctor(resultSet.getLong("id"), resultSet.getString("surname"), resultSet.getString("name"), resultSet.getString("patronymic"), resultSet.getString("specialization"));
			listOfDoctors.add(doctor);
		}
		resultSet.close();
		return listOfDoctors;
	}

	@Override
	protected Doctor returnEntity(ResultSet resultSet) throws SQLException {
		Doctor doctor = null;
		while (resultSet.next()) {
			doctor = new Doctor(resultSet.getLong("id"), resultSet.getString("surname"), resultSet.getString("name"), resultSet.getString("patronymic"), resultSet.getString("specialization"));
		}
		resultSet.close();
		return doctor;
	}

	protected ArrayList<FullName> showDoctorName(){
		ArrayList<Doctor> listOfDoctors = showTable();
		ArrayList<FullName> listOfNames = new ArrayList<FullName>();
		for(int i = 0; i < listOfDoctors.size(); i++){
			listOfNames.add(new FullName(listOfDoctors.get(i).getId(), listOfDoctors.get(i).getSurname(),
					listOfDoctors.get(i).getName(), listOfDoctors.get(i).getPatronymic()));
		}
		return listOfNames;
	}
	public String showCount(Doctor doctor) throws SQLException{
		String sqlQuery = "SELECT COUNT(*) FROM prescriptions WHERE doctor = " + doctor.getId();
		return String.valueOf(getNumber(sqlQuery));
	}
}

